import { TUser } from 'src/db/schemas/users';
import { NeonHttpDatabase } from 'drizzle-orm/neon-http';
import * as schema from 'src/db/schemas';
export declare class UsersService {
    private db;
    constructor(db: NeonHttpDatabase<typeof schema>);
    update(id: number, data: Partial<TUser>): Promise<{
        id: number;
        name: string;
        email: string;
        phone: string;
        password: string;
        onboarding_completed: boolean;
        onboarding_step: number;
        created_at: Date;
        updated_at: Date;
    }[]>;
    upsert(data: Partial<TUser>, relations?: string[]): Promise<{
        id: number;
        name: string;
        email: string;
        phone: string;
        onboarding_completed: boolean;
        onboarding_step: number;
        password?: string;
        created_at?: Date;
        updated_at?: Date;
        goals?: {
            id: number;
            user_id: number;
            period: string;
            category: string;
            title: string;
            status: string;
            priority: string;
            start_date: string;
            end_date: string;
            description?: string;
            created_at?: Date;
            updated_at?: Date;
            user?: any;
            tasks?: {
                id: number;
                user_id: number;
                goal_id: number;
                title: string;
                priority: string;
                status: string;
                last_status_at: Date;
                description?: string;
                due_date?: Date;
                created_at?: Date;
                updated_at?: Date;
                goal?: {
                    id: number;
                    user_id: number;
                    period: string;
                    category: string;
                    title: string;
                    status: string;
                    priority: string;
                    start_date: string;
                    end_date: string;
                    description?: string;
                    created_at?: Date;
                    updated_at?: Date;
                    user?: any;
                    tasks?: any[];
                };
                user?: any;
            }[];
        }[];
        tasks?: {
            id: number;
            user_id: number;
            goal_id: number;
            title: string;
            priority: string;
            status: string;
            last_status_at: Date;
            description?: string;
            due_date?: Date;
            created_at?: Date;
            updated_at?: Date;
            goal?: {
                id: number;
                user_id: number;
                period: string;
                category: string;
                title: string;
                status: string;
                priority: string;
                start_date: string;
                end_date: string;
                description?: string;
                created_at?: Date;
                updated_at?: Date;
                user?: any;
                tasks?: any[];
            };
            user?: any;
        }[];
        reminders?: {
            id: number;
            user_id: number;
            content: string;
            schedule_time: Date;
            frequency: string;
            task_id: number;
            goal_id: number;
            user?: any;
            task?: {
                id: number;
                user_id: number;
                goal_id: number;
                title: string;
                priority: string;
                status: string;
                last_status_at: Date;
                description?: string;
                due_date?: Date;
                created_at?: Date;
                updated_at?: Date;
                goal?: {
                    id: number;
                    user_id: number;
                    period: string;
                    category: string;
                    title: string;
                    status: string;
                    priority: string;
                    start_date: string;
                    end_date: string;
                    description?: string;
                    created_at?: Date;
                    updated_at?: Date;
                    user?: any;
                    tasks?: any[];
                };
                user?: any;
            };
            goal?: {
                id: number;
                user_id: number;
                period: string;
                category: string;
                title: string;
                status: string;
                priority: string;
                start_date: string;
                end_date: string;
                description?: string;
                created_at?: Date;
                updated_at?: Date;
                user?: any;
                tasks?: {
                    id: number;
                    user_id: number;
                    goal_id: number;
                    title: string;
                    priority: string;
                    status: string;
                    last_status_at: Date;
                    description?: string;
                    due_date?: Date;
                    created_at?: Date;
                    updated_at?: Date;
                    goal?: any;
                    user?: any;
                }[];
            };
        }[];
    }>;
    getBy(by: 'id' | 'email' | 'phone', value: string | number, relations?: string[]): Promise<TUser | undefined>;
}
